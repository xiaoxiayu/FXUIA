# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: imageprocess.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='imageprocess.proto',
  package='imageprocess',
  syntax='proto3',
  serialized_pb=_b('\n\x12imageprocess.proto\x12\x0cimageprocess\"\x1c\n\nImgRequest\x12\x0e\n\x06imgobj\x18\x01 \x01(\x0c\"\x1a\n\x08ImgReply\x12\x0e\n\x06imgobj\x18\x01 \x01(\x0c\",\n\nOcrRequest\x12\x0e\n\x06imgobj\x18\x01 \x01(\x0c\x12\x0e\n\x06thresh\x18\x02 \x01(\x05\"I\n\x0e\x46indImgRequest\x12\x0e\n\x06imgobj\x18\x01 \x01(\x0c\x12\x13\n\x0btemplateobj\x18\x02 \x01(\x0c\x12\x12\n\nmatchvalue\x18\x03 \x01(\x05\"\x17\n\x08TxtReply\x12\x0b\n\x03txt\x18\x01 \x01(\t\"9\n\x0b\x45lementRect\x12\t\n\x01x\x18\x01 \x01(\x05\x12\t\n\x01y\x18\x02 \x01(\x05\x12\t\n\x01w\x18\x03 \x01(\x05\x12\t\n\x01h\x18\x04 \x01(\x05\"<\n\nElementPos\x12\n\n\x02x0\x18\x01 \x01(\x05\x12\n\n\x02y0\x18\x02 \x01(\x05\x12\n\n\x02x1\x18\x03 \x01(\x05\x12\n\n\x02y1\x18\x04 \x01(\x05\x32\x90\x02\n\x05Image\x12:\n\x04\x44raw\x12\x18.imageprocess.ImgRequest\x1a\x16.imageprocess.ImgReply\"\x00\x12I\n\x0e\x44\x65tectElements\x12\x18.imageprocess.ImgRequest\x1a\x19.imageprocess.ElementRect\"\x00\x30\x01\x12\x39\n\x03OCR\x12\x18.imageprocess.ImgRequest\x1a\x16.imageprocess.TxtReply\"\x00\x12\x45\n\tFindImage\x12\x1c.imageprocess.FindImgRequest\x1a\x18.imageprocess.ElementPos\"\x00\x42\x36\n\x1bio.grpc.examples.helloworldB\x0fHelloWorldProtoP\x01\xa2\x02\x03HLWb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_IMGREQUEST = _descriptor.Descriptor(
  name='ImgRequest',
  full_name='imageprocess.ImgRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='imgobj', full_name='imageprocess.ImgRequest.imgobj', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=36,
  serialized_end=64,
)


_IMGREPLY = _descriptor.Descriptor(
  name='ImgReply',
  full_name='imageprocess.ImgReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='imgobj', full_name='imageprocess.ImgReply.imgobj', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=66,
  serialized_end=92,
)


_OCRREQUEST = _descriptor.Descriptor(
  name='OcrRequest',
  full_name='imageprocess.OcrRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='imgobj', full_name='imageprocess.OcrRequest.imgobj', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='thresh', full_name='imageprocess.OcrRequest.thresh', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=94,
  serialized_end=138,
)


_FINDIMGREQUEST = _descriptor.Descriptor(
  name='FindImgRequest',
  full_name='imageprocess.FindImgRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='imgobj', full_name='imageprocess.FindImgRequest.imgobj', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='templateobj', full_name='imageprocess.FindImgRequest.templateobj', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='matchvalue', full_name='imageprocess.FindImgRequest.matchvalue', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=140,
  serialized_end=213,
)


_TXTREPLY = _descriptor.Descriptor(
  name='TxtReply',
  full_name='imageprocess.TxtReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='txt', full_name='imageprocess.TxtReply.txt', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=215,
  serialized_end=238,
)


_ELEMENTRECT = _descriptor.Descriptor(
  name='ElementRect',
  full_name='imageprocess.ElementRect',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='x', full_name='imageprocess.ElementRect.x', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='y', full_name='imageprocess.ElementRect.y', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='w', full_name='imageprocess.ElementRect.w', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='h', full_name='imageprocess.ElementRect.h', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=240,
  serialized_end=297,
)


_ELEMENTPOS = _descriptor.Descriptor(
  name='ElementPos',
  full_name='imageprocess.ElementPos',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='x0', full_name='imageprocess.ElementPos.x0', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='y0', full_name='imageprocess.ElementPos.y0', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='x1', full_name='imageprocess.ElementPos.x1', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='y1', full_name='imageprocess.ElementPos.y1', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=299,
  serialized_end=359,
)

DESCRIPTOR.message_types_by_name['ImgRequest'] = _IMGREQUEST
DESCRIPTOR.message_types_by_name['ImgReply'] = _IMGREPLY
DESCRIPTOR.message_types_by_name['OcrRequest'] = _OCRREQUEST
DESCRIPTOR.message_types_by_name['FindImgRequest'] = _FINDIMGREQUEST
DESCRIPTOR.message_types_by_name['TxtReply'] = _TXTREPLY
DESCRIPTOR.message_types_by_name['ElementRect'] = _ELEMENTRECT
DESCRIPTOR.message_types_by_name['ElementPos'] = _ELEMENTPOS

ImgRequest = _reflection.GeneratedProtocolMessageType('ImgRequest', (_message.Message,), dict(
  DESCRIPTOR = _IMGREQUEST,
  __module__ = 'imageprocess_pb2'
  # @@protoc_insertion_point(class_scope:imageprocess.ImgRequest)
  ))
_sym_db.RegisterMessage(ImgRequest)

ImgReply = _reflection.GeneratedProtocolMessageType('ImgReply', (_message.Message,), dict(
  DESCRIPTOR = _IMGREPLY,
  __module__ = 'imageprocess_pb2'
  # @@protoc_insertion_point(class_scope:imageprocess.ImgReply)
  ))
_sym_db.RegisterMessage(ImgReply)

OcrRequest = _reflection.GeneratedProtocolMessageType('OcrRequest', (_message.Message,), dict(
  DESCRIPTOR = _OCRREQUEST,
  __module__ = 'imageprocess_pb2'
  # @@protoc_insertion_point(class_scope:imageprocess.OcrRequest)
  ))
_sym_db.RegisterMessage(OcrRequest)

FindImgRequest = _reflection.GeneratedProtocolMessageType('FindImgRequest', (_message.Message,), dict(
  DESCRIPTOR = _FINDIMGREQUEST,
  __module__ = 'imageprocess_pb2'
  # @@protoc_insertion_point(class_scope:imageprocess.FindImgRequest)
  ))
_sym_db.RegisterMessage(FindImgRequest)

TxtReply = _reflection.GeneratedProtocolMessageType('TxtReply', (_message.Message,), dict(
  DESCRIPTOR = _TXTREPLY,
  __module__ = 'imageprocess_pb2'
  # @@protoc_insertion_point(class_scope:imageprocess.TxtReply)
  ))
_sym_db.RegisterMessage(TxtReply)

ElementRect = _reflection.GeneratedProtocolMessageType('ElementRect', (_message.Message,), dict(
  DESCRIPTOR = _ELEMENTRECT,
  __module__ = 'imageprocess_pb2'
  # @@protoc_insertion_point(class_scope:imageprocess.ElementRect)
  ))
_sym_db.RegisterMessage(ElementRect)

ElementPos = _reflection.GeneratedProtocolMessageType('ElementPos', (_message.Message,), dict(
  DESCRIPTOR = _ELEMENTPOS,
  __module__ = 'imageprocess_pb2'
  # @@protoc_insertion_point(class_scope:imageprocess.ElementPos)
  ))
_sym_db.RegisterMessage(ElementPos)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\033io.grpc.examples.helloworldB\017HelloWorldProtoP\001\242\002\003HLW'))
import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class ImageStub(object):
  """The greeting service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Draw = channel.unary_unary(
        '/imageprocess.Image/Draw',
        request_serializer=ImgRequest.SerializeToString,
        response_deserializer=ImgReply.FromString,
        )
    self.DetectElements = channel.unary_stream(
        '/imageprocess.Image/DetectElements',
        request_serializer=ImgRequest.SerializeToString,
        response_deserializer=ElementRect.FromString,
        )
    self.OCR = channel.unary_unary(
        '/imageprocess.Image/OCR',
        request_serializer=ImgRequest.SerializeToString,
        response_deserializer=TxtReply.FromString,
        )
    self.FindImage = channel.unary_unary(
        '/imageprocess.Image/FindImage',
        request_serializer=FindImgRequest.SerializeToString,
        response_deserializer=ElementPos.FromString,
        )


class ImageServicer(object):
  """The greeting service definition.
  """

  def Draw(self, request, context):
    """Sends a greeting
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DetectElements(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def OCR(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindImage(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ImageServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Draw': grpc.unary_unary_rpc_method_handler(
          servicer.Draw,
          request_deserializer=ImgRequest.FromString,
          response_serializer=ImgReply.SerializeToString,
      ),
      'DetectElements': grpc.unary_stream_rpc_method_handler(
          servicer.DetectElements,
          request_deserializer=ImgRequest.FromString,
          response_serializer=ElementRect.SerializeToString,
      ),
      'OCR': grpc.unary_unary_rpc_method_handler(
          servicer.OCR,
          request_deserializer=ImgRequest.FromString,
          response_serializer=TxtReply.SerializeToString,
      ),
      'FindImage': grpc.unary_unary_rpc_method_handler(
          servicer.FindImage,
          request_deserializer=FindImgRequest.FromString,
          response_serializer=ElementPos.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'imageprocess.Image', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaImageServicer(object):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This class was generated
  only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
  """The greeting service definition.
  """
  def Draw(self, request, context):
    """Sends a greeting
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def DetectElements(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def OCR(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def FindImage(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaImageStub(object):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This class was generated
  only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
  """The greeting service definition.
  """
  def Draw(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Sends a greeting
    """
    raise NotImplementedError()
  Draw.future = None
  def DetectElements(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  def OCR(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  OCR.future = None
  def FindImage(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  FindImage.future = None


def beta_create_Image_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This function was
  generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
  request_deserializers = {
    ('imageprocess.Image', 'DetectElements'): ImgRequest.FromString,
    ('imageprocess.Image', 'Draw'): ImgRequest.FromString,
    ('imageprocess.Image', 'FindImage'): FindImgRequest.FromString,
    ('imageprocess.Image', 'OCR'): ImgRequest.FromString,
  }
  response_serializers = {
    ('imageprocess.Image', 'DetectElements'): ElementRect.SerializeToString,
    ('imageprocess.Image', 'Draw'): ImgReply.SerializeToString,
    ('imageprocess.Image', 'FindImage'): ElementPos.SerializeToString,
    ('imageprocess.Image', 'OCR'): TxtReply.SerializeToString,
  }
  method_implementations = {
    ('imageprocess.Image', 'DetectElements'): face_utilities.unary_stream_inline(servicer.DetectElements),
    ('imageprocess.Image', 'Draw'): face_utilities.unary_unary_inline(servicer.Draw),
    ('imageprocess.Image', 'FindImage'): face_utilities.unary_unary_inline(servicer.FindImage),
    ('imageprocess.Image', 'OCR'): face_utilities.unary_unary_inline(servicer.OCR),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_Image_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This function was
  generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
  request_serializers = {
    ('imageprocess.Image', 'DetectElements'): ImgRequest.SerializeToString,
    ('imageprocess.Image', 'Draw'): ImgRequest.SerializeToString,
    ('imageprocess.Image', 'FindImage'): FindImgRequest.SerializeToString,
    ('imageprocess.Image', 'OCR'): ImgRequest.SerializeToString,
  }
  response_deserializers = {
    ('imageprocess.Image', 'DetectElements'): ElementRect.FromString,
    ('imageprocess.Image', 'Draw'): ImgReply.FromString,
    ('imageprocess.Image', 'FindImage'): ElementPos.FromString,
    ('imageprocess.Image', 'OCR'): TxtReply.FromString,
  }
  cardinalities = {
    'DetectElements': cardinality.Cardinality.UNARY_STREAM,
    'Draw': cardinality.Cardinality.UNARY_UNARY,
    'FindImage': cardinality.Cardinality.UNARY_UNARY,
    'OCR': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'imageprocess.Image', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
